version: 2.1

# Define some constants
working_dir_name: &workingDirName ~/workspace
java_docker_image: &javaMavenDockerImage circleci/openjdk:11.0.3-stretch

# Define some configuration
working_dir: &workingDirectory
    working_directory: *workingDirName
java_runtime: &javaRuntime
    docker:
        - image: *javaMavenDockerImage

# Define some reusable parameters names and types
docker_checksum_parameter_definition: &dockerChecksumParameterDefinition
    checksum:
        type: string
docker_tag_parameter_definition: &dockerTagParameterDefinition
    tag:
        type: string
docker_username_parameter_definition: &dockerUsernameParameterDefinition
    username:
        type: string
docker_password_parameter_definition: &dockerPasswordParameterDefinition
    password:
        type: string

#
#
#snapshot_parameters_definition: &snapshotParametersDefinition
#    parameters:
#        checksum:
#            type: string
#release_parameters_definition: &releaseParametersDefinition
#    parameters:
#        tag:
#            type: string

# Define some reusable parameter values
snapshot_opts_parameter_value: &snapshotOptsParameterValue
    opts: -Ddocker.image.tag-id=<<parameters.checksum>>
release_opts_parameter_value: &releaseOptsParameterValue
    opts: -Ddocker.image.tag=<<parameters.tag>>

username_parameter_value: &usernameParameterValue
    username: <<parameters.username>>
password_parameter_value: &passwordParameterValue
    password: <<parameters.password>>


commands:
    retrieve_workspace:
        description: "Retrieves the working directory in the workspace"
        steps:
            - attach_workspace:
                at: *workingDirName

    save_workspace:
        description: "Saves the working directory as the workspace"
        steps:
            - persist_to_workspace:
                root: *workingDirName
                paths:
                    - .

    retrieve_maven_local_repository_from_cache:
        description: "Retrieves the Maven's Local Repository from Cache, based on poms' checksum"
        steps:
            - run:
                name: Aggregating all project's pom files in a single file
                command: |
                    rm -f .all-poms
                    find . -type f -regex ".*/pom.xml" | sort -n | xargs cat >> .all-poms ;
            - restore_cache:
                # First try with the pom's aggregation checksum. If not available, get most recent
                keys:
                    - cache-{{ .Environment.SERVICE_NAME }}-{{ .Environment.CACHE_VERSION }}-{{ checksum ".all-poms" }}
                    - cache-{{ .Environment.SERVICE_NAME }}-{{ .Environment.CACHE_VERSION }}-

    generate_new_maven_local_repository:
        description: "Generates a new Maven local repository (when checksum is different only)"
        steps:
            - retrieve_maven_local_repository_from_cache
            - run:
                name: Downloading required dependencies and plugins
                command: mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -P ci -P docker-build
            - save_cache:
                key: cache-{{ .Environment.SERVICE_NAME }}-{{ .Environment.CACHE_VERSION }}-{{ checksum ".all-poms" }}
                paths:
                    - ~/.m2

    compile_code:
        description: "Compiles sources of the Maven's project"
        steps:
            - run:
                name: Compiling source code
                command: mvn clean compile -P ci -B -V

    test_code:
        description: "Performs tests using the Maven's test phase. Note that it will skip the compiler:compile goal"
        steps:
            - run:
                name: Running tests
                command: mvn test -P ci -B -DforkCount=0 -Dmaven.main.skip --fail-at-end

    save_test_results:
        description: "Aggregates the test results and stores them."
        steps:
            - run:
                name: Aggregating all project's tests results
                command: |
                    mkdir -p ~/test-results/junit/
                    find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                when: always
            - store_test_results:
                    path: ~/test-results
            - store_artifacts:
                    path: ~/test-results/junit

    docker_job:
        description: "Setups stuff for build and pushing a Docker image"
        steps:
            - retrieve_workspace
            - retrieve_maven_local_repository_from_cache
            - setup_remote_docker

    create_docker_image:
        description: "Creates a Docker Image using Maven"
        parameters:
            opts:
                type: string
                default: ""
        steps:
            - run:
                name: Creating Docker Image
                command: mvn package -DskipTests -P ci -P docker-build -B <<parameters.opts>>

    push_docker_image:
        description: "Pushes the Docker Image to DockerHub."
        parameters:
            <<: *dockerUsernameParameterDefinition
            <<: *dockerPasswordParameterDefinition
            opts:
        steps:
            - echo <<parameters.password>> | docker login -u <<parameters.username>> --password-stdin
            # - echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_LOGIN} --password-stdin
            - run:
                name: Pushing Docker Image
                command: mvn dockerfile:push -DskipTests -P docker-build <<parameters.opts>> # <<parameters.login_opts>>

#    push_docker_image_with_credentials:
#        description:
#        parameters:
#            opts:
#            user:
#            pass:
#        steps:
#            - push_docker_image:
#                - opts: <<parameters.opts>>
#                - login_opts: -Ddockerfile.username=<<parameters.user>> -Ddockerfile:password=<<parameters.pass>>




    create_snapshot_docker_image:
        description: "Creates a Docker Image using Maven, overriding the tag-id property. Use it for snapshot images"
        parameters:
            <<: *dockerChecksumParameterDefinition
        steps:
            - create_docker_image:
                  <<: *snapshotOptsParameterValue

    create_release_docker_image:
        description: "Creates a Docker Image using Maven, overriding the tag. Use it for release images"
        parameters:
            <<: *dockerTagParameterDefinition
        steps:
            - create_docker_image:
                  <<: *releaseOptsParameterValue

    push_snapshot_docker_image:
        description: "Pushes the Docker Image using Maven, overriding the tag-id property. Use it for snapshot images"
        parameters:
            <<: *dockerChecksumParameterDefinition
            <<: *dockerUsernameParameterDefinition
            <<: *dockerPasswordParameterDefinition
        steps:
            - push_docker_image:
                <<: *snapshotOptsParameterValue
                <<: *usernameParameterValue
                <<: *passwordParameterValue


    push_release_docker_image:
        description: "Pushes the Docker Image using Maven, overriding the tag. Use it for release images"
        parameters:
            <<: *dockerTagParameterDefinition
            <<: *dockerUsernameParameterDefinition
            <<: *dockerPasswordParameterDefinition
        steps:
            - push_docker_image:
                  <<: *releaseOptsParameterValue
                  <<: *usernameParameterValue
                  <<: *passwordParameterValue





jobs:
    compile_and_test:
        # Apply working directory and docker image
        <<: *workingDirectory
        <<: *javaRuntime

        steps:
            - checkout
            - generate_new_maven_local_repository
            - compile_code
#            - test_code
#            - save_test_results
            - save_workspace

    build_and_push_snapshot_docker_image:
        # Apply working directory and docker image
        <<: *workingDirectory
        <<: *javaRuntime

        steps:
            - docker_job
            - create_snapshot_docker_image:
                checksum: ${CIRCLE_SHA1}
            - push_snapshot_docker_image:
                checksum: ${CIRCLE_SHA1}
                username: ${DOCKER_USERNAME}
                password: ${DOCKER_PASSWORD}

    build_and_push_release_docker_image:
        # Apply working directory and docker image
        <<: *workingDirectory
        <<: *javaRuntime

        steps:
            - docker_job
            - create_release_docker_image:
                tag: ${CIRCLE_TAG}
            - push_release_docker_image:
                tag: ${CIRCLE_TAG}
                username: ${DOCKER_USERNAME}
                password: ${DOCKER_PASSWORD}


workflows:
    version: 2.1
    snapshots:
        jobs:
            - compile_and_test
            - build_and_push_snapshot_docker_image:
                context: docker-hub
                requires:
                    - compile_and_test

    releases:
        jobs:
            - compile_and_test:
                filters:
                    tags:
                        only: /.*/
                    branches:
                        ignore: /.*/
            - build_and_push_release_docker_image:
                context: docker-hub
                requires:
                    - compile_and_test
                filters:
                    tags:
                        only: /.*/
