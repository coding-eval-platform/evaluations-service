version: 2.1

# First define some constants
working_dir_name: &workingDirName ~/workspace
git_docker_image: &gitDockerImage alpine/git
java_docker_image: &javaMavenDockerImage circleci/openjdk:11.0.2-jdk

# Define some configuration
working_dir: &workingDirectory
    working_directory: *workingDirName
java_runtime: &javaRuntime
    docker:
        - image: *javaMavenDockerImage

# Some cache steps...
save_maven_local_repository_in_cache: &saveMavenLocalRepositoryInCache
    save_cache:
        key: maven-cache-{{ .Environment.SERVICE_NAME }}-{{ .Environment.CACHE_VERSION }}
        paths:
            - ~/.m2
retrieve_maven_local_repository_from_cache: &restoreMavenLocalRepositoryInCache
    restore_cache:
        key: maven-cache-{{ .Environment.SERVICE_NAME }}-{{ .Environment.CACHE_VERSION }}


jobs:
    checkout_code:
        # For the checkout job only apply the working directory
        <<: *workingDirectory

        # Use the Alpine's Docker image to checkout code
        docker:
            - image: *gitDockerImage

        steps:
            # Download code from VCS
            - checkout

            # Persist the downloaded code into the workspace
            - persist_to_workspace:
                root: *workingDirName
                paths:
                    - ./

    compile:
        # Apply working directory and docker image
        <<: *workingDirectory
        <<: *javaRuntime

        steps:
            # Restore workspace
            - attach_workspace:
                  at: *workingDirName

            # Restore actual cache (Maven's Local Repository)
            - <<: *restoreMavenLocalRepositoryInCache

            # Download all dependencies and plugins
            - run: mvn dependency:resolve dependency:resolve-plugins

            # Store in cache the Maven's Local Repository
            - <<: *saveMavenLocalRepositoryInCache

            # Compile modules. This will download missing dependencies (not in cache)
            - run: mvn clean compile -DskipTests=true -P continuous-integration -B -V

            # Persist the built stuff (compiled coded, artifacts, etc.)
            - persist_to_workspace:
                root: *workingDirName
                paths:
                    - ./

    test:
        # Apply working directory and docker image
        <<: *workingDirectory
        <<: *javaRuntime

        steps:
            # Restore workspace
            - attach_workspace:
                at: *workingDirName

            - <<: *restoreMavenLocalRepositoryInCache

            # Run tests! (Artifacts are already installed in the build job)
            - run: mvn test -P continuous-integration -B

            # Generate aggregate reports
            - run: mvn surefire-report:report -DskipTests=true -Daggregate=true -DlinkXRef=false

            # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
            - store_test_results:
                path: target/site/surefire-report.html


workflows:
    version: 2.1
    compile_and_test:
        jobs:
            - checkout_code
            - compile:
                requires:
                    - checkout_code
            - test:
                requires:
                    - compile
